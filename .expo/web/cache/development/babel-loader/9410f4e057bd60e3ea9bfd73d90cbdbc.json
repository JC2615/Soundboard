{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\josh2\\\\Documents\\\\React_Native_Projects\\\\Soundboard\\\\src\\\\screens\\\\HomeScreen.js\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { playSound } from \"../apis/audio_api\";\nimport SortableGridView from \"react-native-sortable-gridview\";\nimport { SimpleLineIcons } from '@expo/vector-icons';\n\nfunction chooseName(nameList, state) {\n  var namesUsed = [];\n\n  for (var soundObject in state) {\n    namesUsed.push(state[soundObject].name);\n  }\n\n  var randomElement = nameList[Math.floor(Math.random() * nameList.length)];\n\n  while (namesUsed.includes(randomElement)) {\n    randomElement = nameList[Math.floor(Math.random() * nameList.length)];\n  }\n\n  return randomElement;\n}\n\nfunction HomeScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      sounds = _useState2[0],\n      setSounds = _useState2[1];\n\n  var lockData = [];\n  var soundNames = [\"Bark\", \"Meow\", \"Bleat\", \"Chirp\", \"Blub\", \"Neigh\", \"Buzz\", \"Croak\", \"Hiss\", \"Moo\"];\n\n  if (sounds.length < 10) {\n    lockData.push({\n      name: 'Add box'\n    });\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, React.createElement(SortableGridView, {\n    data: sounds,\n    lockData: lockData,\n    sensitivity: 150,\n    numPerRow: 2,\n    onDragStart: function onDragStart() {},\n    onDragRelease: function onDragRelease(data) {\n      setSounds(sounds);\n    },\n    renderItem: function renderItem(item, index) {\n      return React.createElement(View, {\n        uniqueKey: item.backgroundColor,\n        onTap: function onTap() {\n          return playSound(item.name.toLowerCase());\n        },\n        style: [styles.item, {\n          backgroundColor: item.backgroundColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: [styles.text, {\n          color: item.color\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }\n      }, item.name));\n    },\n    itemCoverStyle: {\n      marginTop: 5,\n      marginLeft: 5\n    },\n    renderItemCover: function renderItemCover(item, index) {\n      return React.createElement(TouchableOpacity, {\n        style: styles.cover,\n        onPress: function onPress() {\n          Alert.alert(\"Delete Sound\", \"Tap Delete to delete this sound\", [{\n            text: \"Cancel\"\n          }, {\n            text: \"Delete\",\n            onPress: function onPress() {\n              var data = _toConsumableArray(sounds);\n\n              data.splice(index, 1);\n              setSounds(data);\n            }\n          }]);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, React.createElement(SimpleLineIcons, {\n        name: \"trash\",\n        size: 24,\n        color: \"gray\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }));\n    },\n    renderLockItem: function renderLockItem(item, index) {\n      return React.createElement(View, {\n        uniqueKey: index,\n        style: styles.lockItem,\n        onTap: function onTap() {\n          Alert.alert(\"Add Sound\", \"Tap OK to add a new sound\", [{\n            text: \"Cancel\"\n          }, {\n            text: \"OK\",\n            onPress: function onPress() {\n              var data = _toConsumableArray(sounds);\n\n              var randomColor = \"#rgba(\" + Math.round(Math.random() * 255) + \", \" + Math.round(Math.random() * 255) + \", \" + Math.round(Math.random() * 255) + \", 1)\";\n              var name = chooseName(soundNames, sounds);\n              data.push({\n                name: name,\n                backgroundColor: randomColor,\n                color: '#fff'\n              });\n              setSounds(data);\n            }\n          }]);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, item.name, \" +\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  item: {\n    flex: 1,\n    borderRadius: 4,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  cover: {\n    backgroundColor: \"transparent\"\n  },\n  lockItem: {\n    flex: 1,\n    backgroundColor: \"gray\",\n    borderRadius: 4,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default HomeScreen;","map":{"version":3,"sources":["C:/Users/josh2/Documents/React_Native_Projects/Soundboard/src/screens/HomeScreen.js"],"names":["React","useState","playSound","SortableGridView","SimpleLineIcons","chooseName","nameList","state","namesUsed","soundObject","push","name","randomElement","Math","floor","random","length","includes","HomeScreen","sounds","setSounds","lockData","soundNames","flex","data","item","index","backgroundColor","toLowerCase","styles","text","color","marginTop","marginLeft","cover","Alert","alert","onPress","splice","lockItem","randomColor","round","StyleSheet","create","borderRadius","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport { View, Text, StyleSheet, Alert, TouchableOpacity, ScrollView} from \"react-native\";\r\nimport { playSound } from \"../apis/audio_api\";\r\nimport SortableGridView from \"react-native-sortable-gridview\";\r\nimport { SimpleLineIcons } from '@expo/vector-icons';\r\n\r\nfunction chooseName(nameList, state) {\r\n  let namesUsed = [];\r\n  for (const soundObject in state) {\r\n    namesUsed.push(state[soundObject].name);\r\n  }\r\n  let randomElement = nameList[Math.floor(Math.random() * nameList.length)];\r\n  while(namesUsed.includes(randomElement)){\r\n    randomElement = nameList[Math.floor(Math.random() * nameList.length)];\r\n  }\r\n  return randomElement;\r\n}\r\n\r\nfunction HomeScreen() {\r\n  const [sounds, setSounds] = useState([]);\r\n  let lockData = [];\r\n  const soundNames = [\"Bark\", \"Meow\", \"Bleat\", \"Chirp\", \"Blub\", \"Neigh\", \"Buzz\", \"Croak\", \"Hiss\", \"Moo\"];\r\n  if (sounds.length < 10) {\r\n    lockData.push({\r\n      name: 'Add box',\r\n    })\r\n  }\r\n  return (\r\n    <View style={{flex: 1}}>\r\n      <SortableGridView\r\n      data={sounds}\r\n      lockData={lockData}\r\n      sensitivity={150} \r\n      numPerRow={2}\r\n      onDragStart={() => {}}\r\n      onDragRelease={(data) => {setSounds(sounds)}}\r\n      renderItem={(item, index) => {\r\n        return (\r\n          <View\r\n            uniqueKey={item.backgroundColor} // Important! Should add this props!!!\r\n            onTap={() => playSound(item.name.toLowerCase())}\r\n            style={[styles.item, { backgroundColor: item.backgroundColor }]}\r\n          >\r\n            <Text style={[styles.text, { color: item.color }]}>\r\n              {item.name}\r\n            </Text>\r\n          </View>\r\n        );\r\n      }}\r\n\r\n      itemCoverStyle={{marginTop: 5, marginLeft: 5}}\r\n      renderItemCover={(item, index) => {\r\n        return (\r\n          <TouchableOpacity\r\n            style={styles.cover}\r\n            onPress={() => {\r\n              Alert.alert(\r\n                \"Delete Sound\",\r\n                \"Tap Delete to delete this sound\",\r\n                [\r\n                  {text: \"Cancel\"},\r\n                  {text: \"Delete\", onPress: () => {\r\n                    let data = [...sounds];\r\n              data.splice(index, 1);\r\n              setSounds(data);\r\n                  } },\r\n                ]\r\n              )\r\n              \r\n            }}\r\n          >\r\n            <SimpleLineIcons name=\"trash\" size={24} color=\"gray\" />\r\n          </TouchableOpacity>\r\n        )\r\n      }}\r\n\r\n      renderLockItem={(item, index) => {\r\n        return (\r\n          <View\r\n            uniqueKey={index}\r\n            style={styles.lockItem}\r\n            onTap={() => {\r\n              Alert.alert(\r\n                \"Add Sound\",\r\n                \"Tap OK to add a new sound\",\r\n                [\r\n                  {text: \"Cancel\"},\r\n                  {text: \"OK\", onPress: () => {\r\n                    let data = [...sounds];\r\n              const randomColor = `#rgba(${Math.round(Math.random() * 255)}, ${Math.round(Math.random() * 255)}, ${Math.round(Math.random() * 255)}, 1)`;\r\n              const name = chooseName(soundNames, sounds);\r\n              data.push({\r\n                name,\r\n                backgroundColor: randomColor,\r\n                color: '#fff'\r\n              });\r\n              setSounds(data);\r\n                  }}\r\n                ]\r\n              )\r\n            }}\r\n          >\r\n            <Text>{item.name} +</Text>\r\n          </View>\r\n        )\r\n      }}\r\n    />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  item: {\r\n    flex: 1,\r\n    borderRadius: 4,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  cover: {\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  lockItem: {\r\n    flex: 1,\r\n    backgroundColor: \"gray\",\r\n    borderRadius: 4,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  }\r\n});\r\n\r\nexport default HomeScreen;\r\n"]},"metadata":{},"sourceType":"module"}